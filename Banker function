int Hello()
{
	int i, j;
	for (i = 0; i < n; i++)
	{
		if (finish[i] == false)
		{
			for (j = 0; j < m; j++)
				if (need[i][j] > work[j]) break;
			if (j == m)
			{
				finish[i] = true;
				return i;
			}
		}
	}
	return -1;
}

int iamsafe()
{
	int i = 0, j, k = 0, count = n;
	for (j = 0; j < m; j++)
		work[j] = available[j];
	for (j = 0; j < m; j++)
		finish[i] = false;
	while (count > 0)
	{
		for (i = 0; i < n; i++)
		{
			i = Hello();
			if (i == -1)
			{
				printf("\nThe system is in unsafe state");
				return 0;
			}
			for (j = 0; j < m; j++)
				work[j] += allocation[i][j];
			iamsafe[k++] = i;
			count--;
		}
	}
	if (finish[i - 1] == false)
	{
		printf("\nThe system is in unsafe state");
		return 0;
	}
	printf("\nThe system is in safe state, safe sequence: ");
	for (i = 0; i < n; i++)
		printf("P%d, ", iamsafe[i]);
	return 0;
}
